# Note

/// Quick Start ///

▼ Flask virtual env
# Create
python3 -m venv venv
# Get in
source venv/bin/activate
# Get out
deactivate

* (venv) では、仮想環境下のPython3を使用
* (venv) 外では、別のPython3が使用される
  => ライブラリ等も未インストール状態(pipもしかり)


▼ Set an environment variables

export FLASK_APP=manage.py

- Development
export FLASK_DEBUG=1
export FLASK_ENV=development
export APP_SETTINGS="project.config.DevelopmentConfig"

- Testing
export FLASK_ENV=development
export APP_SETTINGS="project.config.TestingConfig"

- Production
export FLASK_ENV=production
export APP_SETTINGS="project.config.ProductionConfig"



▼ Mail settings

export APP_MAIL_USERNAME="logbase@ymail.ne.jp"
export APP_MAIL_PASSWORD="Kokesi814"
; ikedakaren@hotmail.co.jp



▼ Database Settings

- Delete database
flask manager drop_db

- Create database
flask manager create_db

- Set migration
flask db init
flask db migrate

- Create a master user
export MASTER_EMAIL="katuken814@icloud.com"
export MASTER_PASSWORD="Kokesi814"
flask manager create_master



▼ Run the local server
flask run


# TCP ---------------------------------------
TCP/IP モデル - プロトコルスタック (コンピュータが通信するプロトコル階層)
プロトコル - データを通信をするうえでの約束事・規約

TCP/IP プロトコルスタック : プロトコル (全体のフロー)
↓ アプリケーション層          : HTTP
↓ トランスポート層            : TCP
↓ インターネット層            : IP
↓ ネットワークインターフェース層 : Ethernet

* トランスポート層
OS上で動くプログラムにデータを届けるため、ポート番号を指定
  - ポート番号 : コンピュータ通信において、OS上で動作するプログラム(プロセス)を識別する番号
* インターネット層
ネットワーク上のコンピュータを識別するために IP アドレスを指定

IP アドレス:ポート番号 の形で送信元/宛先アドレスが書かれる
  - (例) 34.111.64.3:80


# クライアントサーバ ---------------------------
クライアントサーバモデル - ソフトウェアアーキテクチャのひとつ (ソフトウェアの構築方法・設計スタイル)

* クライアント
ソフトウェアを利用するコンピュータやソフトウェア
  - (例) Web ブラウザや、Webブラウザを起動しているPC・スマホ
* サーバ
ソフトウェアを提供するコンピュータやソフトウェア
  - (例) nginx や Apache HTTP Server 等を搭載したコンピュータ

* カプセル化
HTTPクライアントがリクエストを送る際、各階層でヘッダを付与
* 非カプセル化
Webサーバがそのリクエストを受け取る際、各階層でヘッダを除去

HTTPクライアント → HTTP  → TCP → IP → Ethernet ⤵︎
Webサーバ       ← HTTP  ← TCP ← IP ← Ethernet 


# ソケット通信 ------------------------------------
ソケット - クライアントサーバモデルにおける通信のインターフェース (TCP/IP モデルでいうと、トランスポート層)

サーバのIPアドレスと利用するポート番号をソケットに結び付け、
プログラムからソケットにデータを流し込めば、
自動的に通信相手のプログラムにデータが送られるという仕組み

アプリケーション層          : HTTP
      ↓
[ ソケットAPI ] <---- データを送るインターフェースを提供
      ↓ 
トランスポート層            : TCP

* Nginx & uWSGI の関係
App <-> uWSGI <-> socket <-> Nginx <-> Client



▼ Manipulate Nginx
# Run (pathが通っているため nginx のみで起動)
nginx
# Stop
nginx -s stop
# Restart
brew services restart nginx
# See status 
lsof -c nginx -P | grep LISTEN
# Version
nginx -v
# Settings(vim / cat)
vim /usr/local/etc/nginx/nginx.conf


▼ Manipulate uWSGI
# Run
sudo uwsgi --ini uwsgi.ini
# Stop
sudo killall -9 uwsgi


▼ AWS 
# インスタンス 接続
ssh -i ~/Apps/mine/AWS/keypair/logbase-kp.pem ec2-user@18.180.139.158




▼ Coding Notes

#  HTML & CSS  ----------------------------------------------

#* On/OffでのUIデザインの切り替え --------------------------------------------------------
#*  切り替える役割を持つタグは class属性 'toggler' 及び data属性 'data-id' を所持
#*  'data-id' の値 = 切り替え対象タグのid属性
#*  表示の切り替え対象となるタグは 任意のid属性 及び data属性 'data-status' を所持
#*  'data-status' の値 = 'on' / 'off' (例：on = 表示 off = 非表示
#*  上記設定は切り替えの機能を担うJS関数にて活用 (関数の詳細は js/ui/toggle.js にて)
#* -----------------------------------------------------------------------------------

#*  --------------------------------------------------------
#*
#*
#*
#* -----------------------------------------------------------------------------------


#  CSS  -----------------------------------------------------

#* z-indexの設定 ----------------------------------------------------------------------
#*  headerの値が 5 であり、他の要素の設定はこれを基準に上下する
#*  (例 : headerの裏を通って降りてくるプルダウンがある場合 => header 5, pulldown 4)
#*  (例 : headerの上層にモーダル、その中間に上敷きがある場合 => modal 7, overlay 6)
#* -----------------------------------------------------------------------------------

#* -----------------------------------------------------------------------------------
#*  
#*  
#* -----------------------------------------------------------------------------------

#* -----------------------------------------------------------------------------------
#*  
#*  
#* -----------------------------------------------------------------------------------

#  JS  ------------------------------------------------------

#* -----------------------------------------------------------------------------------
#*  
#*  
#* -----------------------------------------------------------------------------------
