; uwsgi.ini

[uwsgi]

; --------------
;  wsgiファイル  |
; --------------
base_dir = /Users/kokesi/Apps/mine/log_base/
chdir = %(base_dir)
wsgi-file = %(base_dir)/manage.py
; wsgi-file = manage.py
callable = app
socket = /tmp/uwsgi.sock
chmod-socket = 666


; -----------------------
; アクセス許可ホスト:ポート  |
; -----------------------
; http=0.0.0.0:8080


; ------------------
;  プロセス、スレッド  |
; ------------------
processes = 5
enable-threads = true
threads = 4
; リクエストを受けるプロセスを分散
thunder-lock = true
; 指定した回数リクエストを受けるとリロード
max-requests = 3000
; 一斉にリロードするとその間サービスが止まるので、リロード時にプロセスごとに差を設ける
max-requests-delta = 300
master = true


; --------------------------------------------------------
;  デーモン化 - バックグラウンドプロセスとしてプログラムを働かせる  |
;  => コマンドラインを終了するとサービスも停止という状態が無くなる  |
; --------------------------------------------------------
; daemonize = /var/log/uWSGI-@(exec://date +%%Y-%%m-%%d).log
; daemonize = /var/log/uwsgi.log
; ;! putenv(): Invalid argument [core/uwsgi.c line 4383]
; log-reopen = true
; ; 指定ログサイズを超過した場合、ローテート(自動的に古いログを削除)
; log-maxsize = 8000000
; ; chown - ファイルやディレクトリの所有者を変更
; logfile-chown = on
; ; chmod - ファイルやディレクトリのアクセス権を変更
; logfile-chmod = 644

; logto=/var/log/uwsgi/uwsgi.log

; /Users/kokesi/Apps/mine/log_base/var/log/uwsgi
; -----------------------------------------------------------------
; pidファイル - Linux上でサービスが起動した場合、該当プロセスのIDなどが記述  |
; => デーモン化したuwsgiを停止、リロードする                             |
; -----------------------------------------------------------------
; pidfile = /var/run/uwsgi/uwsgi.pid
; プロセスの停止時にソケットをクリーンアップ (pidファイル, log, etc.)
vacuum = true

;! writing pidfile to /var/run/uwsgi/uwsgi.pid
;! open("/var/run/uwsgi/uwsgi.pid"): No such file or directory [core/utils.c line 3624]


; --------------------
; 実効ユーザー・グループ  |
; --------------------
; Linux command id (id daemon) で確認
; uid = daemon
; gid = daemon


; ------------------------
; 環境変数 (.env から取得)  |
; ------------------------
for-readline = .env
  env = %(_)
endfor = 


; module = manage
die-on-term = true